buildscript {
    repositories {
        mavenCentral()
    }
    
    sourceSets {
	    integrationTest {
	        java {
	            compileClasspath += main.output + test.output
	            runtimeClasspath += main.output + test.output
	            srcDir file('src/integration-test/java')
	        }
	        resources.srcDir file('src/integration-test/resources')
	    }
	}
    
    configurations {
	    integrationTestCompile.extendsFrom testCompile
	    integrationTestRuntime.extendsFrom testRuntime
	}
    
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {
    baseName = 'coach'
    version =  '0.0.1'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	compile project(':domain')
	
	
    // tag::jetty[]
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile('org.springframework.boot:spring-boot-starter-jetty')
    // end::jetty[]
    // tag::actuator[]
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('io.katharsis:katharsis-spring:2.3.0')
    compile('org.reflections:reflections:0.9.10')
    
    // end::actuator[]
    testCompile('junit:junit')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.jayway.restassured:rest-assured:2.9.0')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test