apply from: 'gradle/profiles/default.gradle'

if (project.hasProperty('profile')) {
	profile = project.getProperty('profile')
	print 'applying profile ' + profile
	apply from: 'gradle/profiles/' + profile + '.gradle'
} else {
	logger.warn('No profile given. Please specify a profile with -Pprofile=... Will use only default values.')
}

allprojects {
	apply plugin: 'jacoco'
	apply plugin: 'eclipse'
	
	repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    
    group = 'net.d80harri.coach'
    version = '0.0.1-SNAPSHOT'

    buildscript {
      sourceSets {
          integrationTest {
              java {
                  compileClasspath += main.output + test.output
                  runtimeClasspath += main.output + test.output
                  srcDir file('src/integration-test/java')
              }
              resources.srcDir file('src/integration-test/resources')
          }
      }
        
        configurations {
          integrationTestCompile.extendsFrom testCompile
          integrationTestRuntime.extendsFrom testRuntime
      }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
    
    test{
	 	ignoreFailures = rootProject.ignoreTestFailures
	 	reports.html.enabled = false
	}
	
	integrationTest {
		ignoreFailures = rootProject.ignoreIntegrationTestFailures
		reports.html.enabled = false
	}
}

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects 
    subprojects.each {
       sourceSets it.sourceSets.main
    }

    reports {
      xml.enabled true
      html.enabled true
      html.destination "${buildDir}/reports/jacoco"
      csv.enabled false
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}


